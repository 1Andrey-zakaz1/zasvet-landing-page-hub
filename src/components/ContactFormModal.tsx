
import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { toast } from "@/hooks/use-toast";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { SendHorizontal, Loader2 } from "lucide-react";

// Define form schema with validation
const formSchema = z.object({
  name: z.string().min(2, { message: "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤" }),
  phone: z.string().min(10, { message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" }),
  email: z.string().email({ message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email" }).optional().or(z.literal("")),
  message: z.string().optional(),
});

type FormValues = z.infer<typeof formSchema>;

interface ContactFormModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  formType?: "contact" | "request";
}

const ContactFormModal: React.FC<ContactFormModalProps> = ({
  open,
  onOpenChange,
  formType = "contact",
}) => {
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      phone: "",
      email: "",
      message: "",
    },
  });

  const submitToERPNext = async (data: FormValues) => {
    const erpUrl = "https://erp.pkzasvet.ru";
    const apiKey = "10fe15d4ec5f1cf";
    const apiSecret = "6a6dd351e2c6421";
    
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ ERPNext:", data);
    console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API Key:", apiKey);
    console.log("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º API Secret:", apiSecret.substring(0, 5) + "...");
    
    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ERPNext Lead
      const leadData = {
        doctype: "Lead",
        lead_name: data.name,
        mobile_no: data.phone,
        email_id: data.email || undefined,
        notes: data.message || undefined,
        source: "Website"
      };

      // –£–¥–∞–ª—è–µ–º undefined –ø–æ–ª—è
      Object.keys(leadData).forEach(key => {
        if (leadData[key] === undefined) {
          delete leadData[key];
        }
      });

      console.log("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ERPNext:", leadData);
      console.log("üîó URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", `${erpUrl}/api/resource/Lead`);

      const response = await fetch(`${erpUrl}/api/resource/Lead`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `token ${apiKey}:${apiSecret}`,
        },
        body: JSON.stringify(leadData),
      });

      console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å:", response.status);
      console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:", response.statusText);

      const responseText = await response.text();
      console.log("üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseText);

      if (!response.ok) {
        let errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;
        
        try {
          const errorJson = JSON.parse(responseText);
          console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ ERPNext:", errorJson);
          
          if (errorJson.message) {
            errorMessage = errorJson.message;
          } else if (errorJson.exc) {
            errorMessage = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö";
          }
        } catch (e) {
          console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON");
          errorMessage = `${errorMessage} - ${responseText.substring(0, 100)}`;
        }
        
        throw new Error(errorMessage);
      }

      let result;
      try {
        result = JSON.parse(responseText);
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ª–∏–¥ –≤ ERPNext:", result);
      } catch (e) {
        console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON:", responseText);
        result = { success: true, response: responseText };
      }
      
      return result;
    } catch (error) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ ERPNext:", error);
      throw error;
    }
  };

  const submitFallback = async (data: FormValues) => {
    console.log("üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏");
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    return new Promise((resolve) => {
      setTimeout(() => {
        console.log("üìß –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:", data);
        resolve({ success: true, method: "fallback" });
      }, 1000);
    });
  };

  const onSubmit = async (data: FormValues) => {
    console.log("üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:", data);
    setIsSubmitting(true);

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ ERPNext
      await submitToERPNext(data);
      
      console.log("üéâ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ERPNext!");
      
      toast({
        title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
        description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      });
      
      form.reset();
      onOpenChange(false);
    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ ERPNext:", error);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥
        await submitFallback(data);
        
        console.log("üéâ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥!");
        
        toast({
          title: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
          description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        });
        
        form.reset();
        onOpenChange(false);
      } catch (fallbackError) {
        console.error("üí• –û—à–∏–±–∫–∞ –∏ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ:", fallbackError);
        
        let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. ";
        
        if (error instanceof Error) {
          if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
            errorMessage += "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. ";
          } else if (error.message.includes('401') || error.message.includes('403')) {
            errorMessage += "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ";
          } else if (error.message.includes('500')) {
            errorMessage += "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. ";
          } else {
            errorMessage += `–û—à–∏–±–∫–∞: ${error.message}. `;
          }
        }
        
        errorMessage += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.";
        
        toast({
          title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
          description: errorMessage,
          variant: "destructive",
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const title = formType === "contact" 
    ? "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏" 
    : "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É";
  
  const description = formType === "contact"
    ? "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
    : "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏";

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="bg-zasvet-black border-zasvet-gold/30 text-zasvet-white sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle className="text-2xl text-zasvet-gold">{title}</DialogTitle>
          <DialogDescription className="text-zasvet-white/80">
            {description}
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>–ò–º—è <span className="text-red-500">*</span></FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" 
                      {...field} 
                      className="bg-zasvet-black/50 border-zasvet-gold/30 focus:border-zasvet-gold" 
                      required
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>
                    –¢–µ–ª–µ—Ñ–æ–Ω <span className="text-red-500">*</span>
                  </FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="+7 (___) ___-__-__" 
                      {...field} 
                      className="bg-zasvet-black/50 border-zasvet-gold/30 focus:border-zasvet-gold"
                      required
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="example@mail.ru" 
                      type="email" 
                      {...field} 
                      className="bg-zasvet-black/50 border-zasvet-gold/30 focus:border-zasvet-gold" 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="message"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>–°–æ–æ–±—â–µ–Ω–∏–µ</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å" 
                      {...field} 
                      className="bg-zasvet-black/50 border-zasvet-gold/30 focus:border-zasvet-gold min-h-[100px]" 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter className="pt-4">
              <Button 
                type="submit" 
                variant="gold" 
                className="w-full" 
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" /> 
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  <>
                    <SendHorizontal className="mr-2 h-4 w-4" /> 
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                  </>
                )}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

export default ContactFormModal;
