
import { useState } from "react";
import { toast } from "@/hooks/use-toast";
import { submitToERPNext, submitFallback, LeadData } from "@/utils/erpNextApi";

export const useContactFormSubmit = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const submitForm = async (data: LeadData, onSuccess: () => void) => {
    console.log("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –•—É–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ä–º—ã");
    console.log("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);
    
    setIsSubmitting(true);

    try {
      console.log("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã–∑—ã–≤–∞–µ–º submitToERPNext...");
      const result = await submitToERPNext(data);
      
      console.log("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      console.log("üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –†–µ–∑—É–ª—å—Ç–∞—Ç:", result);
      
      toast({
        title: "–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        description: `–ó–∞—è–≤–∫–∞ –æ—Ç ${data.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ERPNext. ID –ª–∏–¥–∞: ${result.data?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`,
      });
      
      console.log("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã–∑—ã–≤–∞–µ–º onSuccess callback");
      onSuccess();
      
    } catch (error) {
      console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ö—É–∫–µ:", error);
      
      if (error instanceof Error) {
        console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏:", error.message);
        
        if (error.message === "DUPLICATE_EMAIL") {
          console.log("üìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email");
          
          toast({
            title: "–ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            description: `–ó–∞—è–≤–∫–∞ —Å email ${data.email} —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.`,
          });
          
          onSuccess();
          return;
        }
        
        if (error.message === "NETWORK_ERROR") {
          console.log("üåê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –º–µ—Ç–æ–¥—É");
          
          try {
            await submitFallback(data);
            
            toast({
              title: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
              description: "–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
            });
            
            onSuccess();
            return;
          } catch (fallbackError) {
            console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –∏ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ:", fallbackError);
          }
        }
      }
      
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥
      console.log("üîÑ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫");
      try {
        await submitFallback(data);
        
        console.log("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª!");
        
        toast({
          title: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
          description: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        });
        
        onSuccess();
      } catch (fallbackError) {
        console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –¥–∞–∂–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:", fallbackError);
        
        toast({
          title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 383 312-00-91",
          variant: "destructive",
        });
      }
    } finally {
      console.log("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã");
      setIsSubmitting(false);
    }
  };

  return {
    isSubmitting,
    submitForm
  };
};
