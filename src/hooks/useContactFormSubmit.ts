
import { useState } from "react";
import { toast } from "@/hooks/use-toast";
import { submitToERPNext, submitFallback, LeadData } from "@/utils/erpNextApi";

export const useContactFormSubmit = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const submitForm = async (data: LeadData, onSuccess: () => void) => {
    console.log("üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:", data);
    setIsSubmitting(true);

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ ERPNext
      const result = await submitToERPNext(data);
      
      console.log("üéâ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ERPNext!");
      console.log("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞:", result);
      
      toast({
        title: "–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ ERPNext",
        description: `–ó–∞—è–≤–∫–∞ –æ—Ç ${data.name} —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. ID –ª–∏–¥–∞: ${result.data?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`,
      });
      
      onSuccess();
    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ ERPNext:", error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email
      if (error instanceof Error && error.message === "DUPLICATE_EMAIL") {
        console.log("üìß –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ email, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        
        toast({
          title: "–ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          description: `–ó–∞—è–≤–∫–∞ —Å email ${data.email} —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.`,
        });
        
        // –î–∞–∂–µ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        onSuccess();
        return;
      }
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥
        await submitFallback(data);
        
        console.log("üéâ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥!");
        
        toast({
          title: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
          description: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º)",
        });
        
        onSuccess();
      } catch (fallbackError) {
        console.error("üí• –û—à–∏–±–∫–∞ –∏ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ:", fallbackError);
        
        let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. ";
        
        if (error instanceof Error) {
          if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
            errorMessage += "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. ";
          } else if (error.message.includes('401') || error.message.includes('403')) {
            errorMessage += "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ";
          } else if (error.message.includes('500')) {
            errorMessage += "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. ";
          } else {
            errorMessage += `–û—à–∏–±–∫–∞: ${error.message}. `;
          }
        }
        
        errorMessage += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.";
        
        toast({
          title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
          description: errorMessage,
          variant: "destructive",
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    isSubmitting,
    submitForm
  };
};
