
// –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ç–µ—Å—Ç API –±–µ–∑ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏
export const runIndependentAPITest = async () => {
  const baseUrl = "https://erp.pkzasvet.ru";
  const apiKey = "a2880258cc82ef9";
  const apiSecret = "2ec04bab1aec805";
  
  console.clear();
  console.log("=".repeat(60));
  console.log("üß™ –ù–ï–ó–ê–í–ò–°–ò–ú–´–ô –¢–ï–°–¢ API - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê");
  console.log("=".repeat(60));
  
  const tests = [];
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  console.log("\nüî∏ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞");
  try {
    const startTime = performance.now();
    const response = await fetch(`${baseUrl}`, { 
      method: 'HEAD',
      mode: 'no-cors'
    });
    const endTime = performance.now();
    
    tests.push({
      name: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞",
      status: "OK", 
      time: `${(endTime - startTime).toFixed(0)}ms`,
      details: `–°—Ç–∞—Ç—É—Å: ${response.status}, –¢–∏–ø: ${response.type}`
    });
    console.log("‚úÖ –î–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω");
  } catch (error) {
    tests.push({
      name: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞", 
      status: "FAIL",
      details: error instanceof Error ? error.message : String(error)
    });
    console.log("‚ùå –î–æ–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error);
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ—Å—Ç–æ–π GET –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å CORS
  console.log("\nüî∏ –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π GET –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å CORS");
  try {
    const startTime = performance.now();
    const response = await fetch(`${baseUrl}/`, {
      method: 'GET',
      mode: 'cors',
      credentials: 'omit',
      headers: {
        'Accept': 'text/html,application/xhtml+xml'
      }
    });
    const endTime = performance.now();
    
    tests.push({
      name: "GET –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (CORS)",
      status: response.ok ? "OK" : "PARTIAL",
      time: `${(endTime - startTime).toFixed(0)}ms`,
      details: `–°—Ç–∞—Ç—É—Å: ${response.status}, Content-Type: ${response.headers.get('content-type')}`
    });
    
    console.log("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ CORS");
    console.log("üì° CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:");
    for (const [key, value] of response.headers.entries()) {
      if (key.toLowerCase().includes('access-control')) {
        console.log(`    ${key}: ${value}`);
      }
    }
  } catch (error) {
    tests.push({
      name: "GET –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (CORS)",
      status: "FAIL",
      details: error instanceof Error ? error.message : String(error)
    });
    console.log("‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ CORS:", error);
  }
  
  // –¢–µ—Å—Ç 3: –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  const apiEndpoints = [
    '/api/method/ping',
    '/api/method/version', 
    '/api/method/frappe.utils.get_site_info',
    '/api/method/frappe.auth.get_logged_user'
  ];
  
  for (const endpoint of apiEndpoints) {
    console.log(`\nüî∏ –¢–µ—Å—Ç API: ${endpoint}`);
    try {
      const startTime = performance.now();
      const response = await fetch(`${baseUrl}${endpoint}`, {
        method: 'GET',
        mode: 'cors',
        credentials: 'omit',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      const endTime = performance.now();
      
      const responseText = await response.text();
      
      tests.push({
        name: `API ${endpoint}`,
        status: response.ok ? "OK" : "PARTIAL",
        time: `${(endTime - startTime).toFixed(0)}ms`,
        details: `–°—Ç–∞—Ç—É—Å: ${response.status}, –†–∞–∑–º–µ—Ä: ${responseText.length}–±`
      });
      
      console.log(`üì° ${endpoint} - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`üì° –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): ${responseText.substring(0, 200)}`);
      
    } catch (error) {
      tests.push({
        name: `API ${endpoint}`,
        status: "FAIL",
        details: error instanceof Error ? error.message : String(error)
      });
      console.log(`‚ùå ${endpoint} –ø—Ä–æ–≤–∞–ª–µ–Ω:`, error);
    }
  }
  
  // –¢–µ—Å—Ç 4: CORS preflight –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  console.log("\nüî∏ –¢–µ—Å—Ç 4: CORS Preflight –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤");
  const methods = ['GET', 'POST', 'PUT', 'DELETE'];
  
  for (const method of methods) {
    console.log(`\nüîπ Preflight –¥–ª—è ${method}`);
    try {
      const response = await fetch(`${baseUrl}/api/resource/Lead`, {
        method: 'OPTIONS',
        mode: 'cors',
        headers: {
          'Access-Control-Request-Method': method,
          'Access-Control-Request-Headers': 'Content-Type, Authorization',
          'Origin': window.location.origin
        }
      });
      
      const allowedMethods = response.headers.get('access-control-allow-methods');
      const allowedHeaders = response.headers.get('access-control-allow-headers');
      const allowedOrigin = response.headers.get('access-control-allow-origin');
      
      tests.push({
        name: `CORS Preflight ${method}`,
        status: response.ok ? "OK" : "FAIL",
        details: `Methods: ${allowedMethods}, Headers: ${allowedHeaders}, Origin: ${allowedOrigin}`
      });
      
      console.log(`üì° Preflight ${method}:`);
      console.log(`    Allowed Methods: ${allowedMethods}`);
      console.log(`    Allowed Headers: ${allowedHeaders}`);
      console.log(`    Allowed Origin: ${allowedOrigin}`);
      
    } catch (error) {
      tests.push({
        name: `CORS Preflight ${method}`,
        status: "FAIL",
        details: error instanceof Error ? error.message : String(error)
      });
      console.log(`‚ùå Preflight ${method} –ø—Ä–æ–≤–∞–ª–µ–Ω:`, error);
    }
  }
  
  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  console.log("\nüî∏ –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã");
  const staticFiles = [
    '/assets/css/frappe-web.css',
    '/assets/js/frappe-web.min.js', 
    '/favicon.ico'
  ];
  
  for (const file of staticFiles) {
    try {
      const response = await fetch(`${baseUrl}${file}`, {
        method: 'HEAD',
        mode: 'cors'
      });
      
      tests.push({
        name: `–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª ${file}`,
        status: response.ok ? "OK" : "FAIL",
        details: `–°—Ç–∞—Ç—É—Å: ${response.status}`
      });
      
      console.log(`üìÅ ${file}: ${response.status}`);
      
    } catch (error) {
      tests.push({
        name: `–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª ${file}`,
        status: "FAIL", 
        details: error instanceof Error ? error.message : String(error)
      });
      console.log(`‚ùå ${file} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error);
    }
  }
  
  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  console.log("\nüî∏ –¢–µ—Å—Ç 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
  console.log("üåê User Agent:", navigator.userAgent);
  console.log("üåê –ù–∞—à –¥–æ–º–µ–Ω:", window.location.origin);
  console.log("üåê –ü—Ä–æ—Ç–æ–∫–æ–ª:", window.location.protocol);
  console.log("üåê Cookies –≤–∫–ª—é—á–µ–Ω—ã:", navigator.cookieEnabled);
  console.log("üåê –Ø–∑—ã–∫:", navigator.language);
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log("\n" + "=".repeat(60));
  console.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –†–ê–°–®–ò–†–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò");
  console.log("=".repeat(60));
  
  tests.forEach((test, index) => {
    const statusIcon = test.status === "OK" ? "‚úÖ" : 
                      test.status === "PARTIAL" ? "üü°" : "‚ùå";
    console.log(`${statusIcon} ${index + 1}. ${test.name}: ${test.status}`);
    if (test.time) console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è: ${test.time}`);
    if (test.details) console.log(`   üìã –î–µ—Ç–∞–ª–∏: ${test.details}`);
    console.log("");
  });
  
  const passedTests = tests.filter(t => t.status === "OK").length;
  const partialTests = tests.filter(t => t.status === "PARTIAL").length;
  const totalTests = tests.length;
  
  console.log(`üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, ${partialTests} —á–∞—Å—Ç–∏—á–Ω–æ`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
  
  if (passedTests === 0) {
    console.log("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: API –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    console.log("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ ERPNext —Å–µ—Ä–≤–µ—Ä");
    console.log("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 80/443 –æ—Ç–∫—Ä—ã—Ç");
    console.log("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞");
  } else if (passedTests < totalTests / 2) {
    console.log("‚ö†Ô∏è CORS –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
    console.log("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ common_site_config.json");
    console.log("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ supervisor/systemd –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω");
    console.log("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å '*' –≤ allowed_origins –≤—Ä–µ–º–µ–Ω–Ω–æ");
  } else {
    console.log("üü° –ß–∞—Å—Ç–∏—á–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
  }
  
  return {
    passed: passedTests,
    partial: partialTests,
    total: totalTests,
    tests: tests,
    success: passedTests === totalTests
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
export const testAPIFromConsole = () => {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API...");
  runIndependentAPITest()
    .then(result => {
      console.log("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:", result);
    })
    .catch(error => {
      console.log("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:", error);
    });
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
(window as any).testAPI = testAPIFromConsole;
