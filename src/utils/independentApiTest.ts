
// –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ç–µ—Å—Ç API –±–µ–∑ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏
export const runIndependentAPITest = async () => {
  const baseUrl = "https://erp.pkzasvet.ru";
  const apiKey = "a2880258cc82ef9";
  const apiSecret = "2ec04bab1aec805";
  
  console.clear();
  console.log("=".repeat(60));
  console.log("üß™ –ù–ï–ó–ê–í–ò–°–ò–ú–´–ô –¢–ï–°–¢ API - –ß–ò–°–¢–´–ô –ü–û–î–•–û–î");
  console.log("=".repeat(60));
  
  const tests = [];
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  console.log("\nüî∏ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞");
  try {
    const startTime = performance.now();
    const response = await fetch(`${baseUrl}`, { 
      method: 'HEAD',
      mode: 'no-cors'
    });
    const endTime = performance.now();
    
    tests.push({
      name: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞",
      status: "OK", 
      time: `${(endTime - startTime).toFixed(0)}ms`,
      details: `–°—Ç–∞—Ç—É—Å: ${response.status}, –¢–∏–ø: ${response.type}`
    });
    console.log("‚úÖ –î–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω");
  } catch (error) {
    tests.push({
      name: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞", 
      status: "FAIL",
      details: error instanceof Error ? error.message : String(error)
    });
    console.log("‚ùå –î–æ–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error);
  }
  
  // –¢–µ—Å—Ç 2: CORS preflight
  console.log("\nüî∏ –¢–µ—Å—Ç 2: CORS Preflight (OPTIONS)");
  try {
    const startTime = performance.now();
    const response = await fetch(`${baseUrl}/api/resource/Lead`, {
      method: 'OPTIONS',
      headers: {
        'Access-Control-Request-Method': 'POST',
        'Access-Control-Request-Headers': 'Content-Type, Authorization'
      }
    });
    const endTime = performance.now();
    
    const corsHeaders = {
      'access-control-allow-origin': response.headers.get('access-control-allow-origin'),
      'access-control-allow-methods': response.headers.get('access-control-allow-methods'),
      'access-control-allow-headers': response.headers.get('access-control-allow-headers'),
      'access-control-allow-credentials': response.headers.get('access-control-allow-credentials')
    };
    
    tests.push({
      name: "CORS Preflight",
      status: response.ok ? "OK" : "FAIL",
      time: `${(endTime - startTime).toFixed(0)}ms`,
      details: JSON.stringify(corsHeaders, null, 2)
    });
    
    console.log("üìã CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏:", corsHeaders);
  } catch (error) {
    tests.push({
      name: "CORS Preflight",
      status: "FAIL", 
      details: error instanceof Error ? error.message : String(error)
    });
    console.log("‚ùå CORS Preflight –ø—Ä–æ–≤–∞–ª–µ–Ω:", error);
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –∫ API
  console.log("\nüî∏ –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π GET –∫ API");
  try {
    const startTime = performance.now();
    const response = await fetch(`${baseUrl}/api/method/frappe.auth.get_logged_user`, {
      method: 'GET',
      headers: {
        'Authorization': `token ${apiKey}:${apiSecret}`
      }
    });
    const endTime = performance.now();
    
    const responseText = await response.text();
    
    tests.push({
      name: "GET API –∑–∞–ø—Ä–æ—Å",
      status: response.ok ? "OK" : "FAIL",
      time: `${(endTime - startTime).toFixed(0)}ms`,
      details: `–°—Ç–∞—Ç—É—Å: ${response.status}, –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseText.length} –±–∞–π—Ç`
    });
    
    console.log(`üì° –û—Ç–≤–µ—Ç API (${response.status}):`, responseText.substring(0, 200));
  } catch (error) {
    tests.push({
      name: "GET API –∑–∞–ø—Ä–æ—Å",
      status: "FAIL",
      details: error instanceof Error ? error.message : String(error) 
    });
    console.log("‚ùå GET API –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω:", error);
  }
  
  // –¢–µ—Å—Ç 4: POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
  console.log("\nüî∏ –¢–µ—Å—Ç 4: POST –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞");
  try {
    const testData = {
      first_name: "Test User",
      mobile_no: "+7900123456", 
      source: "Website Test"
    };
    
    const startTime = performance.now();
    const response = await fetch(`${baseUrl}/api/resource/Lead`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `token ${apiKey}:${apiSecret}`
      },
      body: JSON.stringify(testData)
    });
    const endTime = performance.now();
    
    const responseText = await response.text();
    
    tests.push({
      name: "POST —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞",
      status: response.ok ? "OK" : "FAIL", 
      time: `${(endTime - startTime).toFixed(0)}ms`,
      details: `–°—Ç–∞—Ç—É—Å: ${response.status}, –û—Ç–≤–µ—Ç: ${responseText.substring(0, 100)}`
    });
    
    console.log(`üì§ POST —Ä–µ–∑—É–ª—å—Ç–∞—Ç (${response.status}):`, responseText.substring(0, 200));
  } catch (error) {
    tests.push({
      name: "POST —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞",
      status: "FAIL",
      details: error instanceof Error ? error.message : String(error)
    });  
    console.log("‚ùå POST –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω:", error);
  }
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log("\n" + "=".repeat(60));
  console.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø");
  console.log("=".repeat(60));
  
  tests.forEach((test, index) => {
    const statusIcon = test.status === "OK" ? "‚úÖ" : "‚ùå";
    console.log(`${statusIcon} ${index + 1}. ${test.name}: ${test.status}`);
    if (test.time) console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è: ${test.time}`);
    if (test.details) console.log(`   üìã –î–µ—Ç–∞–ª–∏: ${test.details}`);
    console.log("");
  });
  
  const passedTests = tests.filter(t => t.status === "OK").length;
  const totalTests = tests.length;
  
  console.log(`üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  
  if (passedTests === totalTests) {
    console.log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
  } else {
    console.log("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
  }
  
  return {
    passed: passedTests,
    total: totalTests,
    tests: tests,
    success: passedTests === totalTests
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
export const testAPIFromConsole = () => {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Ç–µ—Å—Ç–∞ API...");
  runIndependentAPITest()
    .then(result => {
      console.log("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:", result);
    })
    .catch(error => {
      console.log("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:", error);
    });
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
(window as any).testAPI = testAPIFromConsole;
