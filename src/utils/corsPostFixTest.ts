
// –¢–µ—Å—Ç CORS –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nginx
export const testCorsAfterNginxFix = async () => {
  const baseUrl = "https://erp.pkzasvet.ru";
  
  console.clear();
  console.log("üîß –¢–ï–°–¢ CORS –ü–û–°–õ–ï –ù–ê–°–¢–†–û–ô–ö–ò NGINX");
  console.log("=" .repeat(50));
  console.log("üïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:", new Date().toISOString());
  console.log("üåê –ù–∞—à –¥–æ–º–µ–Ω:", window.location.origin);
  
  const tests = [];
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å –∫ /api/resource/Lead
  console.log("\nüî∏ –¢–µ—Å—Ç 1: OPTIONS –∑–∞–ø—Ä–æ—Å –∫ /api/resource/Lead");
  try {
    const optionsResponse = await fetch(`${baseUrl}/api/resource/Lead`, {
      method: "OPTIONS",
      mode: 'cors',
      headers: {
        'Access-Control-Request-Method': 'POST',
        'Access-Control-Request-Headers': 'Content-Type, Authorization',
        'Origin': window.location.origin
      }
    });
    
    console.log("üì° OPTIONS —Å—Ç–∞—Ç—É—Å:", optionsResponse.status);
    console.log("üì° OPTIONS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:");
    
    const corsHeaders = {};
    for (const [key, value] of optionsResponse.headers.entries()) {
      console.log(`    ${key}: ${value}`);
      if (key.toLowerCase().includes('access-control')) {
        corsHeaders[key] = value;
      }
    }
    
    const allowOrigin = optionsResponse.headers.get('access-control-allow-origin');
    const allowMethods = optionsResponse.headers.get('access-control-allow-methods');
    const allowHeaders = optionsResponse.headers.get('access-control-allow-headers');
    
    tests.push({
      name: "OPTIONS /api/resource/Lead",
      status: optionsResponse.ok ? "OK" : "FAIL",
      details: `Origin: ${allowOrigin}, Methods: ${allowMethods}, Headers: ${allowHeaders}`
    });
    
    console.log("üîç –ê–Ω–∞–ª–∏–∑ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:");
    console.log(`   - Access-Control-Allow-Origin: ${allowOrigin || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    console.log(`   - Access-Control-Allow-Methods: ${allowMethods || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    console.log(`   - Access-Control-Allow-Headers: ${allowHeaders || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    
    if (allowOrigin && (allowOrigin === '*' || allowOrigin === window.location.origin)) {
      console.log("‚úÖ Origin —Ä–∞–∑—Ä–µ—à–µ–Ω");
    } else {
      console.log("‚ùå Origin –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω!");
    }
    
    if (allowMethods && allowMethods.includes('POST')) {
      console.log("‚úÖ POST –º–µ—Ç–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω");
    } else {
      console.log("‚ùå POST –º–µ—Ç–æ–¥ –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω!");
    }
    
    if (allowHeaders && allowHeaders.includes('Authorization') && allowHeaders.includes('Content-Type')) {
      console.log("‚úÖ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã");
    } else {
      console.log("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!");
    }
    
  } catch (error) {
    tests.push({
      name: "OPTIONS /api/resource/Lead",
      status: "FAIL",
      details: error instanceof Error ? error.message : String(error)
    });
    console.log("‚ùå OPTIONS –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω:", error);
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  console.log("\nüî∏ –¢–µ—Å—Ç 2: –†–µ–∞–ª—å–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å –∫ /api/resource/Lead");
  try {
    const testLeadData = {
      first_name: "CORS Test User",
      mobile_no: "+7 999 999 9999",
      source: "Website Test",
      status: "Lead"
    };
    
    const postResponse = await fetch(`${baseUrl}/api/resource/Lead`, {
      method: "POST",
      mode: 'cors',
      credentials: 'omit',
      headers: {
        "Content-Type": "application/json",
        "Authorization": "token a2880258cc82ef9:2ec04bab1aec805",
        "Accept": "application/json"
      },
      body: JSON.stringify(testLeadData)
    });
    
    console.log("üì° POST —Å—Ç–∞—Ç—É—Å:", postResponse.status);
    console.log("üì° POST –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:");
    for (const [key, value] of postResponse.headers.entries()) {
      console.log(`    ${key}: ${value}`);
    }
    
    const responseText = await postResponse.text();
    console.log("üì° POST —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:", responseText.substring(0, 500));
    
    tests.push({
      name: "POST /api/resource/Lead",
      status: postResponse.ok ? "OK" : postResponse.status === 403 ? "AUTH_ERROR" : "FAIL",
      details: `–°—Ç–∞—Ç—É—Å: ${postResponse.status}, –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseText.length}–±`
    });
    
    if (postResponse.ok) {
      console.log("üéâ POST –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!");
    } else if (postResponse.status === 403) {
      console.log("üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–æ CORS —Ä–∞–±–æ—Ç–∞–µ—Ç!)");
    } else {
      console.log("‚ùå POST –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω, –Ω–æ –ø—Ä–∏—á–∏–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤ CORS");
    }
    
  } catch (error) {
    tests.push({
      name: "POST /api/resource/Lead",
      status: "CORS_FAIL",
      details: error instanceof Error ? error.message : String(error)
    });
    console.log("‚ùå POST –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ CORS):", error);
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  console.log("\nüî∏ –¢–µ—Å—Ç 3: GET –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è");
  try {
    const getResponse = await fetch(`${baseUrl}/api/method/ping`, {
      method: "GET",
      mode: 'cors',
      headers: {
        "Accept": "application/json"
      }
    });
    
    console.log("üì° GET —Å—Ç–∞—Ç—É—Å:", getResponse.status);
    const getText = await getResponse.text();
    console.log("üì° GET –æ—Ç–≤–µ—Ç:", getText.substring(0, 200));
    
    tests.push({
      name: "GET /api/method/ping",
      status: getResponse.ok ? "OK" : "FAIL",
      details: `–°—Ç–∞—Ç—É—Å: ${getResponse.status}`
    });
    
  } catch (error) {
    tests.push({
      name: "GET /api/method/ping",
      status: "FAIL",
      details: error instanceof Error ? error.message : String(error)
    });
    console.log("‚ùå GET –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω:", error);
  }
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log("\n" + "=".repeat(50));
  console.log("üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò CORS –ü–û–°–õ–ï –ù–ê–°–¢–†–û–ô–ö–ò NGINX");
  console.log("=".repeat(50));
  
  tests.forEach((test, index) => {
    const statusIcon = test.status === "OK" ? "‚úÖ" : 
                      test.status === "AUTH_ERROR" ? "üîê" :
                      test.status === "CORS_FAIL" ? "üö´" : "‚ùå";
    console.log(`${statusIcon} ${index + 1}. ${test.name}: ${test.status}`);
    if (test.details) console.log(`   üìã ${test.details}`);
  });
  
  const passedTests = tests.filter(t => t.status === "OK" || t.status === "AUTH_ERROR").length;
  const totalTests = tests.length;
  
  console.log(`\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π CORS`);
  
  if (tests.some(t => t.name.includes("OPTIONS") && t.status === "OK")) {
    console.log("üéØ –í–´–í–û–î: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ nginx —Å—Ä–∞–±–æ—Ç–∞–ª–∏! CORS –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.");
    console.log("üí° –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ CORS.");
  } else {
    console.log("‚ö†Ô∏è –í–´–í–û–î: OPTIONS –∑–∞–ø—Ä–æ—Å—ã –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.");
    console.log("üîß –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å nginx –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.");
  }
  
  return {
    passed: passedTests,
    total: totalTests,
    tests: tests,
    corsWorking: tests.some(t => t.name.includes("OPTIONS") && t.status === "OK")
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
export const testCorsNow = () => {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ CORS –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nginx...");
  testCorsAfterNginxFix()
    .then(result => {
      console.log("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:", result);
    })
    .catch(error => {
      console.log("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
    });
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
(window as any).testCorsNow = testCorsNow;
