
export interface LeadData {
  name: string;
  phone: string;
  email?: string;
  message?: string;
}

export interface ERPNextLeadRequest {
  lead_name: string;
  mobile_no?: string;
  email_id?: string;
  title?: string;
  source?: string;
  status?: string;
  territory?: string;
  company?: string;
  blog_subscriber?: number;
}

export interface ERPNextResponse {
  data?: {
    name: string;
    lead_owner?: string;
    territory?: string;
    status?: string;
  };
  message?: string;
}

export const submitToERPNext = async (data: LeadData): Promise<ERPNextResponse> => {
  const erpUrl = "https://erp.pkzasvet.ru";
  const apiKey = "a2880258cc82ef9";
  const apiSecret = "dd6c5048c9befb7";
  
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ ERPNext:", data);
  
  // –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
  const cleanData = {
    name: String(data.name || '').trim(),
    phone: String(data.phone || '').trim(),
    email: data.email ? String(data.email).trim() : undefined,
    message: data.message ? String(data.message).trim() : undefined
  };
  
  console.log("üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", cleanData);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (!cleanData.name || !cleanData.phone) {
    throw new Error("–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const leadData: ERPNextLeadRequest = {
      lead_name: cleanData.name,
      mobile_no: cleanData.phone,
      source: "Website",
      status: "Lead"
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (cleanData.email) {
      leadData.email_id = cleanData.email;
    }
    
    if (cleanData.message) {
      leadData.title = cleanData.message;
      
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ü–æ–¥–ø–∏—Å–∫–∞", –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –±–ª–æ–≥–∞
      if (cleanData.message.includes("–ü–æ–¥–ø–∏—Å–∫–∞")) {
        leadData.blog_subscriber = 1;
        console.log("üìß –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –±–ª–æ–≥–∞");
      }
    }

    console.log("üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞:", leadData);
    console.log("üîó URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", `${erpUrl}/api/resource/Lead`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headers = {
      "Content-Type": "application/json",
      "Authorization": `token ${apiKey}:${apiSecret}`,
      "Accept": "application/json"
    };
    console.log("üì§ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", headers);

    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –±–æ–ª–µ–µ —è–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const requestOptions: RequestInit = {
      method: "POST",
      headers: headers,
      body: JSON.stringify(leadData),
      mode: 'cors',
      credentials: 'omit',
      cache: 'no-cache'
    };
    
    console.log("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", requestOptions);

    const response = await fetch(`${erpUrl}/api/resource/Lead`, requestOptions);

    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å:", response.status);
    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:", response.statusText);
    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - headers:", Object.fromEntries(response.headers.entries()));

    const responseText = await response.text();
    console.log("üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseText);

    if (!response.ok) {
      let errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${response.statusText}`;
      
      try {
        const errorJson = JSON.parse(responseText);
        console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ ERPNext:", errorJson);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email
        if (errorJson.exc_type === "DuplicateEntryError" && errorJson.exception?.includes("Email Address must be unique")) {
          throw new Error("DUPLICATE_EMAIL");
        }
        
        if (errorJson.message) {
          errorMessage = errorJson.message;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        if (errorJson.exception) {
          console.error("‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:", errorJson.exception);
          errorMessage += ` | Exception: ${errorJson.exception}`;
        }
        
      } catch (e) {
        if (e instanceof Error && e.message === "DUPLICATE_EMAIL") {
          throw e;
        }
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON");
      }
      
      throw new Error(errorMessage);
    }

    let result: ERPNextResponse;
    try {
      result = JSON.parse(responseText);
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ª–∏–¥ –≤ ERPNext:", result);
      console.log("üÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞:", result.data?.name);
    } catch (e) {
      console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON:", responseText);
      result = { message: "success" };
    }
    
    return result;
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ ERPNext:", error);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      console.error("üí• –¢–∏–ø –æ—à–∏–±–∫–∏:", error.name);
      console.error("üí• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", error.message);
      console.error("üí• Stack trace:", error.stack);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (CORS –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞)
      if (error.message.includes('Failed to fetch') ||
          error.message.includes('NetworkError') ||
          error.message.includes('CORS') ||
          error.name === 'TypeError') {
        console.log("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ CORS –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞");
        throw new Error("NETWORK_ERROR");
      }
    }
    
    throw error;
  }
};

export const submitFallback = async (data: LeadData): Promise<{ success: boolean; method: string }> => {
  console.log("üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏");
  console.log("üìß –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", data);
  
  // –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ email
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("üìß –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:", data);
      resolve({ success: true, method: "fallback" });
    }, 1000);
  });
};
