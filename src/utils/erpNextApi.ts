export interface LeadData {
  name: string;
  phone: string;
  email?: string;
  message?: string;
}

export interface ERPNextLeadRequest {
  first_name: string;
  mobile_no?: string;
  email_id?: string;
  title?: string;
  source?: string;
  status?: string;
  territory?: string;
  company?: string;
  blog_subscriber?: number;
}

export interface ERPNextResponse {
  data?: {
    name: string;
    lead_owner?: string;
    territory?: string;
    status?: string;
  };
  message?: string;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const testERPNextConnection = async (): Promise<{ success: boolean; details: string }> => {
  const erpUrl = "https://erp.pkzasvet.ru";
  const apiKey = "21c69324f115682";
  const apiSecret = "f60fe9bdacf6644";
  
  console.log("üîç –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø");
  console.log("=" .repeat(50));
  console.log("üîó –¶–µ–ª–µ–≤–æ–π URL:", erpUrl);
  console.log("üåê –¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω:", window.location.origin);
  console.log("üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:", new Date().toISOString());
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–æ–±—â–µ –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    console.log("\n1Ô∏è‚É£ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)");
    
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
      const simpleResponse = await fetch(`${erpUrl}/api/method/ping`, {
        method: "GET",
        mode: 'no-cors' // –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ CORS –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      });
      
      console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (no-cors —Ä–µ–∂–∏–º)");
      console.log("üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", simpleResponse.status);
      console.log("üì° –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:", simpleResponse.type);
      
    } catch (noCorsError) {
      console.log("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –≤ no-cors —Ä–µ–∂–∏–º–µ:", noCorsError);
      return {
        success: false,
        details: `–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${noCorsError instanceof Error ? noCorsError.message : String(noCorsError)}`
      };
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∏–º CORS —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    console.log("\n2Ô∏è‚É£ –¢–ï–°–¢: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å");
    
    const minimalResponse = await fetch(`${erpUrl}/api/method/ping`, {
      method: "GET",
      mode: 'cors',
      credentials: 'omit',
      headers: {
        'Accept': 'application/json'
      }
    });
    
    console.log("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω");
    console.log("üì° –°—Ç–∞—Ç—É—Å:", minimalResponse.status);
    console.log("üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:");
    for (const [key, value] of minimalResponse.headers.entries()) {
      console.log(`    ${key}: ${value}`);
    }
    
    const minimalText = await minimalResponse.text();
    console.log("üì° –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:", minimalText.substring(0, 200));
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∏–º OPTIONS –∑–∞–ø—Ä–æ—Å (preflight)
    console.log("\n3Ô∏è‚É£ –¢–ï–°–¢: OPTIONS preflight –∑–∞–ø—Ä–æ—Å");
    
    const optionsResponse = await fetch(`${erpUrl}/api/method/ping`, {
      method: "OPTIONS",
      mode: 'cors',
      credentials: 'omit',
      headers: {
        'Access-Control-Request-Method': 'GET',
        'Access-Control-Request-Headers': 'Content-Type, Authorization'
      }
    });
    
    console.log("üì° OPTIONS —Å—Ç–∞—Ç—É—Å:", optionsResponse.status);
    console.log("üì° OPTIONS –∑–∞–≥–æ–ª–æ–≤–∫–∏:");
    for (const [key, value] of optionsResponse.headers.entries()) {
      console.log(`    ${key}: ${value}`);
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    console.log("\n4Ô∏è‚É£ –¢–ï–°–¢: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å");
    
    const authHeaders = {
      "Authorization": `token ${apiKey}:${apiSecret}`,
      "Accept": "application/json",
      "Content-Type": "application/json"
    };
    
    const authResponse = await fetch(`${erpUrl}/api/method/frappe.auth.get_logged_user`, {
      method: "GET",
      headers: authHeaders,
      mode: 'cors',
      credentials: 'omit'
    });
    
    console.log("üîê Auth —Å—Ç–∞—Ç—É—Å:", authResponse.status);
    const authText = await authResponse.text();
    console.log("üîê Auth –æ—Ç–≤–µ—Ç:", authText);
    
    if (authResponse.ok) {
      console.log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!");
      return {
        success: true,
        details: `–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã. –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, CORS —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è OK.`
      };
    } else {
      return {
        success: false,
        details: `–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: ${authResponse.status}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏.`
      };
    }

  } catch (error) {
    console.log("üí• –û–®–ò–ë–ö–ê –í –†–ê–°–®–ò–†–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï");
    console.log("üí• –¢–∏–ø –æ—à–∏–±–∫–∏:", typeof error);
    console.log("üí• –ù–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:", error instanceof Error ? error.name : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
    console.log("üí• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", error instanceof Error ? error.message : String(error));
    
    if (error instanceof Error) {
      const errorMessage = error.message.toLowerCase();
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (errorMessage.includes('failed to fetch')) {
        return {
          success: false,
          details: `CORS –ë–õ–û–ö–ò–†–û–í–ö–ê: –ë—Ä–∞—É–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ CORS. 
          
–†–ï–®–ï–ù–ò–Ø:
1. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω "${window.location.origin}" –≤ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ERPNext
2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ "*" –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ System Settings ‚Üí CORS –∏–ª–∏ Website Settings
4. –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É, –¥–æ–±–∞–≤—å—Ç–µ –≤ site_config.json –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS

–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`
        };
      }
      
      if (errorMessage.includes('network')) {
        return {
          success: false,
          details: `–°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ${erpUrl}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.`
        };
      }
    }
    
    return {
      success: false,
      details: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
};

export const submitToERPNext = async (data: LeadData): Promise<ERPNextResponse> => {
  const erpUrl = "https://erp.pkzasvet.ru";
  const apiKey = "21c69324f115682";
  const apiSecret = "f60fe9bdacf6644";
  
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ ERPNext:", data);
  console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { apiKey, apiSecret: apiSecret.substring(0, 5) + "..." });
  
  // –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
  const cleanData = {
    name: String(data.name || '').trim(),
    phone: String(data.phone || '').trim(),
    email: data.email ? String(data.email).trim() : undefined,
    message: data.message ? String(data.message).trim() : undefined
  };
  
  console.log("üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", cleanData);
  
  if (!cleanData.name || !cleanData.phone) {
    console.log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
    throw new Error("–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ERPNext
  const leadData: ERPNextLeadRequest = {
    first_name: cleanData.name,
    mobile_no: cleanData.phone,
    source: "Website",
    status: "Lead"
  };

  if (cleanData.email) {
    leadData.email_id = cleanData.email;
  }
  
  if (cleanData.message) {
    leadData.title = cleanData.message;
    
    if (cleanData.message.includes("–ü–æ–¥–ø–∏—Å–∫–∞")) {
      leadData.blog_subscriber = 1;
      console.log("üìß –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –±–ª–æ–≥–∞");
    }
  }

  console.log("üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–∞:", leadData);
  console.log("üìã JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", JSON.stringify(leadData, null, 2));

  const requestUrl = `${erpUrl}/api/resource/Lead`;
  console.log("üîó URL –∑–∞–ø—Ä–æ—Å–∞:", requestUrl);
  
  const headers = {
    "Content-Type": "application/json",
    "Authorization": `token ${apiKey}:${apiSecret}`,
    "Accept": "application/json",
    "X-Frappe-User": "Administrator"
  };

  console.log("üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", {
    ...headers,
    Authorization: `token ${apiKey}:${apiSecret.substring(0, 5)}...`
  });

  const requestOptions: RequestInit = {
    method: "POST",
    headers: headers,
    body: JSON.stringify(leadData),
    mode: 'cors',
    credentials: 'omit'
  };
  
  console.log("‚öôÔ∏è –ü–æ–ª–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", {
    ...requestOptions,
    body: "—Å–º. –≤—ã—à–µ",
    headers: "—Å–º. –≤—ã—à–µ"
  });
  
  console.log("‚öôÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...");
  console.log("‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", new Date().toISOString());

  try {
    const response = await fetch(requestUrl, requestOptions);
    
    console.log("üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç");
    console.log("üì° –°—Ç–∞—Ç—É—Å:", response.status);
    console.log("üì° –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:", response.statusText);
    console.log("üì° OK —Å—Ç–∞—Ç—É—Å:", response.ok);
    console.log("üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:", Object.fromEntries(response.headers.entries()));
    
    const responseText = await response.text();
    console.log("üì° –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (RAW):", responseText);
    console.log("üì° –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:", responseText.length);

    if (!response.ok) {
      console.log("‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ OK");
      console.log("‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...");
      
      let errorDetails = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      let errorType = "UNKNOWN";
      
      try {
        const errorJson = JSON.parse(responseText);
        console.log("‚ùå –û—à–∏–±–∫–∞ –∫–∞–∫ JSON:", errorJson);
        console.log("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏:", Object.keys(errorJson));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ ERPNext
        if (errorJson.exc_type === "DuplicateEntryError" || 
            (errorJson.message && errorJson.message.includes("Duplicate entry"))) {
          console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ email");
          errorType = "DUPLICATE_EMAIL";
        } else if (errorJson.message && errorJson.message.includes("Permission")) {
          console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞");
          errorType = "PERMISSION_ERROR";
        } else if (errorJson.message && errorJson.message.includes("Authentication")) {
          console.log("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
          errorType = "AUTH_ERROR";
        }
        
        if (errorJson.message) {
          errorDetails = errorJson.message;
        } else if (errorJson.exc) {
          errorDetails = errorJson.exc;
        }
        
      } catch (parseError) {
        console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON:", parseError);
        console.log("‚ùå –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ HTML –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ HTML –ª–∏ —ç—Ç–æ (—á–∞—Å—Ç–æ –ø—Ä–∏ CORS –æ—à–∏–±–∫–∞—Ö)
        if (responseText.includes("<html") || responseText.includes("<!DOCTYPE")) {
          console.log("‚ùå –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML - –≤–æ–∑–º–æ–∂–Ω–æ CORS –ø—Ä–æ–±–ª–µ–º–∞");
          errorType = "CORS_ERROR";
          errorDetails = "–ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON - –ø—Ä–æ–±–ª–µ–º–∞ —Å CORS";
        } else {
          errorDetails = responseText || response.statusText;
        }
      }
      
      console.log("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", errorType);
      console.log("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", errorDetails);
      
      if (errorType === "DUPLICATE_EMAIL") {
        throw new Error("DUPLICATE_EMAIL");
      } else if (errorType === "CORS_ERROR") {
        throw new Error("NETWORK_ERROR");
      }
      
      const finalError = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ERPNext (${response.status}): ${errorDetails}`;
      console.log("‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", finalError);
      throw new Error(finalError);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    
    let result: ERPNextResponse;
    try {
      result = JSON.parse(responseText);
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ª–∏–¥:", result);
      console.log("üÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞:", result.data?.name);
      console.log("üë§ –í–ª–∞–¥–µ–ª–µ—Ü –ª–∏–¥–∞:", result.data?.lead_owner);
      console.log("üè¢ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:", result.data?.territory);
      console.log("üìä –°—Ç–∞—Ç—É—Å:", result.data?.status);
    } catch (parseError) {
      console.log("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ JSON, –Ω–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:", responseText);
      result = { message: "success" };
    }
    
    return result;
    
  } catch (fetchError) {
    console.log("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fetch:", fetchError);
    console.log("üí• –¢–∏–ø –æ—à–∏–±–∫–∏:", typeof fetchError);
    console.log("üí• –ù–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:", fetchError instanceof Error ? fetchError.name : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
    console.log("üí• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", fetchError instanceof Error ? fetchError.message : String(fetchError));
    
    if (fetchError instanceof Error) {
      const errorMessage = fetchError.message.toLowerCase();
      const errorName = fetchError.name.toLowerCase();
      
      console.log("üîç –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏...");
      console.log("üîç –°–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä):", errorMessage);
      console.log("üîç –ò–º—è (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä):", errorName);
      
      if (errorMessage.includes('failed to fetch') ||
          errorMessage.includes('networkerror') ||
          errorMessage.includes('cors') ||
          errorMessage.includes('network') ||
          errorName === 'typeerror' ||
          errorMessage.includes('connection')) {
        console.log("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è/CORS –æ—à–∏–±–∫–∞");
        throw new Error("NETWORK_ERROR");
      }
      
      if (fetchError.message === "DUPLICATE_EMAIL") {
        console.log("üìß –ü—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email");
        throw fetchError;
      }
    }
    
    console.log("üí• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ");
    throw fetchError;
  }
};

export const submitFallback = async (data: LeadData): Promise<{ success: boolean; method: string }> => {
  console.log("üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏");
  console.log("üìß –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", data);
  
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("üìß –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ");
      resolve({ success: true, method: "fallback" });
    }, 1000);
  });
};
