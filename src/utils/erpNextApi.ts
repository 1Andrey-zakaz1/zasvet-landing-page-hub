export interface LeadData {
  name: string;
  phone: string;
  email?: string;
  message?: string;
}

export interface ERPNextLeadRequest {
  first_name: string;
  mobile_no?: string;
  email_id?: string;
  title?: string;
  source?: string;
  status?: string;
  territory?: string;
  company?: string;
  blog_subscriber?: number;
}

export interface ERPNextResponse {
  data?: {
    name: string;
    lead_owner?: string;
    territory?: string;
    status?: string;
  };
  message?: string;
}

export const submitToERPNext = async (data: LeadData): Promise<ERPNextResponse> => {
  const erpUrl = "https://erp.pkzasvet.ru";
  const apiKey = "a2880258cc82ef9";
  const apiSecret = "2ec04bab1aec805";
  
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ ERPNext:", data);
  
  // –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
  const cleanData = {
    name: String(data.name || '').trim(),
    phone: String(data.phone || '').trim(),
    email: data.email ? String(data.email).trim() : undefined,
    message: data.message ? String(data.message).trim() : undefined
  };
  
  console.log("üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", cleanData);
  
  if (!cleanData.name || !cleanData.phone) {
    console.log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
    throw new Error("–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ERPNext
  const leadData: ERPNextLeadRequest = {
    first_name: cleanData.name,
    mobile_no: cleanData.phone,
    source: "Website",
    status: "Lead"
  };

  if (cleanData.email) {
    leadData.email_id = cleanData.email;
  }
  
  if (cleanData.message) {
    leadData.title = cleanData.message;
    
    if (cleanData.message.includes("–ü–æ–¥–ø–∏—Å–∫–∞")) {
      leadData.blog_subscriber = 1;
      console.log("üìß –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –±–ª–æ–≥–∞");
    }
  }

  console.log("üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–∞:", leadData);

  const requestUrl = `${erpUrl}/api/resource/Lead`;
  console.log("üîó URL –∑–∞–ø—Ä–æ—Å–∞:", requestUrl);
  
  const headers = {
    "Content-Type": "application/json",
    "Authorization": `token ${apiKey}:${apiSecret}`,
    "Accept": "application/json"
  };

  const requestOptions: RequestInit = {
    method: "POST",
    headers: headers,
    body: JSON.stringify(leadData),
    mode: 'cors',
    credentials: 'omit'
  };
  
  console.log("‚öôÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...");

  try {
    const response = await fetch(requestUrl, requestOptions);
    
    console.log("üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç");
    console.log("üì° –°—Ç–∞—Ç—É—Å:", response.status);
    console.log("üì° OK —Å—Ç–∞—Ç—É—Å:", response.ok);
    
    const responseText = await response.text();
    console.log("üì° –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:", responseText);

    if (!response.ok) {
      console.log("‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ OK");
      
      let errorDetails = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      
      try {
        const errorJson = JSON.parse(responseText);
        console.log("‚ùå –û—à–∏–±–∫–∞ –∫–∞–∫ JSON:", errorJson);
        
        if (errorJson.exc_type === "DuplicateEntryError") {
          console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ email");
          throw new Error("DUPLICATE_EMAIL");
        }
        
        if (errorJson.message) {
          errorDetails = errorJson.message;
        }
        
      } catch (parseError) {
        console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON:", parseError);
        errorDetails = responseText || response.statusText;
      }
      
      const finalError = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ERPNext: ${response.status} - ${errorDetails}`;
      console.log("‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", finalError);
      throw new Error(finalError);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    
    let result: ERPNextResponse;
    try {
      result = JSON.parse(responseText);
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ª–∏–¥:", result);
      console.log("üÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞:", result.data?.name);
    } catch (parseError) {
      console.log("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ JSON, –Ω–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:", responseText);
      result = { message: "success" };
    }
    
    return result;
    
  } catch (fetchError) {
    console.log("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fetch:", fetchError);
    
    if (fetchError instanceof Error) {
      if (fetchError.message.includes('Failed to fetch') ||
          fetchError.message.includes('NetworkError') ||
          fetchError.message.includes('CORS') ||
          fetchError.message.includes('network') ||
          fetchError.name === 'TypeError') {
        console.log("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è/CORS –æ—à–∏–±–∫–∞");
        throw new Error("NETWORK_ERROR");
      }
      
      if (fetchError.message === "DUPLICATE_EMAIL") {
        console.log("üìß –ü—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email");
        throw fetchError;
      }
    }
    
    console.log("üí• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ");
    throw fetchError;
  }
};

export const submitFallback = async (data: LeadData): Promise<{ success: boolean; method: string }> => {
  console.log("üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏");
  console.log("üìß –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", data);
  
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("üìß –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ");
      resolve({ success: true, method: "fallback" });
    }, 1000);
  });
};
