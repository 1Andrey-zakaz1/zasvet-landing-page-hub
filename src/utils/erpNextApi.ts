
export interface LeadData {
  name: string;
  phone: string;
  email?: string;
  message?: string;
}

export interface ERPNextLeadRequest {
  lead_name: string;
  mobile_no?: string;
  email_id?: string;
  title?: string;
  source?: string;
  status?: string;
  territory?: string;
  company?: string;
  blog_subscriber?: number;
}

export interface ERPNextResponse {
  data?: {
    name: string;
    lead_owner?: string;
    territory?: string;
    status?: string;
  };
  message?: string;
}

export const submitToERPNext = async (data: LeadData): Promise<ERPNextResponse> => {
  const erpUrl = "https://erp.pkzasvet.ru";
  const apiKey = "a2880258cc82ef9";
  const apiSecret = "dd6c5048c9befb7";
  
  console.log("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ ERPNext:", data);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  console.log("üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...");
  try {
    const pingResponse = await fetch(`${erpUrl}`, { 
      method: "HEAD",
      mode: 'no-cors'
    });
    console.log("üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Ping —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω");
  } catch (pingError) {
    console.log("üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ ping —Å–µ—Ä–≤–µ—Ä–∞:", pingError);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  console.log("üîë –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...");
  try {
    const authTestResponse = await fetch(`${erpUrl}/api/method/ping`, {
      method: "GET",
      headers: {
        "Authorization": `token ${apiKey}:${apiSecret}`,
        "Accept": "application/json"
      },
      mode: 'cors'
    });
    console.log("üîë –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", authTestResponse.status);
    const authTestText = await authTestResponse.text();
    console.log("üîë –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", authTestText);
  } catch (authError) {
    console.log("üîë –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", authError);
  }

  // –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
  const cleanData = {
    name: String(data.name || '').trim(),
    phone: String(data.phone || '').trim(),
    email: data.email ? String(data.email).trim() : undefined,
    message: data.message ? String(data.message).trim() : undefined
  };
  
  console.log("üßπ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", cleanData);
  
  if (!cleanData.name || !cleanData.phone) {
    console.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
    throw new Error("–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
  }
  
  // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
  const leadData: ERPNextLeadRequest = {
    lead_name: cleanData.name,
    mobile_no: cleanData.phone,
    source: "Website",
    status: "Lead"
  };

  if (cleanData.email) {
    leadData.email_id = cleanData.email;
  }
  
  if (cleanData.message) {
    leadData.title = cleanData.message;
    
    if (cleanData.message.includes("–ü–æ–¥–ø–∏—Å–∫–∞")) {
      leadData.blog_subscriber = 1;
      console.log("üìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –±–ª–æ–≥–∞");
    }
  }

  console.log("üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–∞:", leadData);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
  try {
    const jsonString = JSON.stringify(leadData);
    console.log("üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: JSON —Å—Ç—Ä–æ–∫–∞:", jsonString);
    const parsedBack = JSON.parse(jsonString);
    console.log("üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—Ä–∞—Ç–Ω–æ —É—Å–ø–µ—à–µ–Ω:", parsedBack);
  } catch (jsonError) {
    console.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ JSON:", jsonError);
    throw new Error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è JSON");
  }

  const requestUrl = `${erpUrl}/api/resource/Lead`;
  console.log("üîó –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: URL –∑–∞–ø—Ä–æ—Å–∞:", requestUrl);
  
  const headers = {
    "Content-Type": "application/json",
    "Authorization": `token ${apiKey}:${apiSecret}`,
    "Accept": "application/json",
    "User-Agent": "Website Contact Form v1.0"
  };
  console.log("üì§ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", headers);

  const requestBody = JSON.stringify(leadData);
  console.log("üì¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", requestBody);

  const requestOptions: RequestInit = {
    method: "POST",
    headers: headers,
    body: requestBody,
    mode: 'cors',
    credentials: 'omit',
    cache: 'no-cache'
  };
  
  console.log("‚öôÔ∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", requestOptions);

  try {
    console.log("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...");
    const startTime = Date.now();
    
    const response = await fetch(requestUrl, requestOptions);
    
    const endTime = Date.now();
    console.log("‚è±Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:", endTime - startTime, "–º—Å");
    
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç");
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°—Ç–∞—Ç—É—Å:", response.status);
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:", response.statusText);
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: OK —Å—Ç–∞—Ç—É—Å:", response.ok);
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:", response.type);
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: URL –æ—Ç–≤–µ—Ç–∞:", response.url);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    const responseHeaders = Object.fromEntries(response.headers.entries());
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:", responseHeaders);

    // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    const responseText = await response.text();
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:", responseText.length, "—Å–∏–º–≤–æ–ª–æ–≤");
    console.log("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:", responseText);

    if (!response.ok) {
      console.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ OK");
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏
      let errorDetails = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      
      try {
        const errorJson = JSON.parse(responseText);
        console.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –∫–∞–∫ JSON:", errorJson);
        
        if (errorJson.exc_type === "DuplicateEntryError") {
          console.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ email");
          throw new Error("DUPLICATE_EMAIL");
        }
        
        if (errorJson.message) {
          errorDetails = errorJson.message;
        }
        
        if (errorJson.exception) {
          console.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:", errorJson.exception);
          errorDetails += ` | Exception: ${errorJson.exception}`;
        }
        
      } catch (parseError) {
        console.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON:", parseError);
        errorDetails = responseText || response.statusText;
      }
      
      const finalError = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ERPNext: ${response.status} - ${errorDetails}`;
      console.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", finalError);
      throw new Error(finalError);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    console.log("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    
    let result: ERPNextResponse;
    try {
      result = JSON.parse(responseText);
      console.log("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ª–∏–¥:", result);
      console.log("üÜî –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞:", result.data?.name);
    } catch (parseError) {
      console.log("‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Ç–≤–µ—Ç –Ω–µ JSON, –Ω–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:", responseText);
      result = { message: "success" };
    }
    
    return result;
    
  } catch (fetchError) {
    console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fetch:");
    console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–∏–ø –æ—à–∏–±–∫–∏:", fetchError);
    console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:", (fetchError as Error).name);
    console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", (fetchError as Error).message);
    console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Stack trace:", (fetchError as Error).stack);
    
    if (fetchError instanceof Error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      if (fetchError.message.includes('Failed to fetch') ||
          fetchError.message.includes('NetworkError') ||
          fetchError.message.includes('CORS') ||
          fetchError.message.includes('network') ||
          fetchError.name === 'TypeError') {
        console.log("üåê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è/CORS –æ—à–∏–±–∫–∞");
        throw new Error("NETWORK_ERROR");
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ ERPNext
      if (fetchError.message === "DUPLICATE_EMAIL") {
        console.log("üìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email");
        throw fetchError;
      }
    }
    
    console.log("üí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ");
    throw fetchError;
  }
};

export const submitFallback = async (data: LeadData): Promise<{ success: boolean; method: string }> => {
  console.log("üìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏");
  console.log("üìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", data);
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("üìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ");
      resolve({ success: true, method: "fallback" });
    }, 1000);
  });
};
