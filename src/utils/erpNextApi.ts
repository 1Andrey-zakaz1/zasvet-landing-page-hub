
export interface LeadData {
  name: string;
  phone: string;
  email?: string;
  message?: string;
}

export interface ERPNextLeadRequest {
  lead_name: string;
  mobile_no?: string;
  email_id?: string;
  title?: string;
  source?: string;
  status?: string;
  territory?: string;
  company?: string;
}

export interface ERPNextResponse {
  data?: {
    name: string;
    lead_owner?: string;
    territory?: string;
    status?: string;
  };
  message?: string;
}

export const submitToERPNext = async (data: LeadData): Promise<ERPNextResponse> => {
  const erpUrl = "https://erp.pkzasvet.ru";
  const apiKey = "10fe15d4ec5f1cf";
  const apiSecret = "6a6dd351e2c6421";
  
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ ERPNext:", data);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Lead doctype
    console.log("üîç –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Lead doctype...");
    
    const metaResponse = await fetch(`${erpUrl}/api/resource/Lead?fields=["*"]&limit_page_length=1`, {
      method: "GET",
      headers: {
        "Authorization": `token ${apiKey}:${apiSecret}`,
        "Content-Type": "application/json",
      },
    });

    console.log("üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", metaResponse.status);
    
    if (metaResponse.ok) {
      const metaText = await metaResponse.text();
      console.log("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∏–¥–æ–≤:", metaText);
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const leadData: ERPNextLeadRequest = {
      lead_name: data.name,
      mobile_no: data.phone,
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      source: "Website",
      status: "Lead" // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ "Lead"
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
    if (data.email && data.email.trim()) {
      leadData.email_id = data.email.trim();
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º title –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (data.message && data.message.trim()) {
      leadData.title = data.message.trim();
    }

    console.log("üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ (—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º):", leadData);
    console.log("üîó URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", `${erpUrl}/api/resource/Lead`);

    const response = await fetch(`${erpUrl}/api/resource/Lead`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `token ${apiKey}:${apiSecret}`,
      },
      body: JSON.stringify(leadData),
    });

    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å:", response.status);
    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:", response.statusText);

    const responseText = await response.text();
    console.log("üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseText);

    if (!response.ok) {
      let errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;
      
      try {
        const errorJson = JSON.parse(responseText);
        console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ ERPNext:", errorJson);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email
        if (errorJson.exc_type === "DuplicateEntryError" && errorJson.exception?.includes("Email Address must be unique")) {
          throw new Error("DUPLICATE_EMAIL");
        }
        
        if (errorJson.message) {
          errorMessage = errorJson.message;
        } else if (errorJson.exc) {
          errorMessage = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ERPNext";
          console.error("‚ùå –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:", errorJson.exc);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
          if (errorJson.exc_type === "TypeError" && errorJson.exception.includes("'str' object does not support item assignment")) {
            console.error("üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö - ERPNext –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –∞ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É");
            errorMessage = "–û—à–∏–±–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: —Å–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö";
          }
        }
      } catch (e) {
        if (e instanceof Error && e.message === "DUPLICATE_EMAIL") {
          throw e;
        }
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON");
        errorMessage = `${errorMessage} - ${responseText.substring(0, 200)}`;
      }
      
      throw new Error(errorMessage);
    }

    let result: ERPNextResponse;
    try {
      result = JSON.parse(responseText);
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ª–∏–¥ –≤ ERPNext:", result);
      console.log("üÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞:", result.data?.name);
      console.log("üìä –°—Ç–∞—Ç—É—Å –ª–∏–¥–∞:", result.data?.status);
    } catch (e) {
      console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON:", responseText);
      result = { message: "success" };
    }
    
    return result;
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ ERPNext:", error);
    throw error;
  }
};

export const submitFallback = async (data: LeadData): Promise<{ success: boolean; method: string }> => {
  console.log("üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏");
  
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("üìß –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:", data);
      resolve({ success: true, method: "fallback" });
    }, 1000);
  });
};
